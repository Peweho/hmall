// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: cart.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartsClient is the client API for Carts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartsClient interface {
	DelCarts(ctx context.Context, in *DelCartsReq, opts ...grpc.CallOption) (*DelCartsResp, error)
}

type cartsClient struct {
	cc grpc.ClientConnInterface
}

func NewCartsClient(cc grpc.ClientConnInterface) CartsClient {
	return &cartsClient{cc}
}

func (c *cartsClient) DelCarts(ctx context.Context, in *DelCartsReq, opts ...grpc.CallOption) (*DelCartsResp, error) {
	out := new(DelCartsResp)
	err := c.cc.Invoke(ctx, "/service.Carts/DelCarts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartsServer is the server API for Carts service.
// All implementations must embed UnimplementedCartsServer
// for forward compatibility
type CartsServer interface {
	DelCarts(context.Context, *DelCartsReq) (*DelCartsResp, error)
	mustEmbedUnimplementedCartsServer()
}

// UnimplementedCartsServer must be embedded to have forward compatible implementations.
type UnimplementedCartsServer struct {
}

func (UnimplementedCartsServer) DelCarts(context.Context, *DelCartsReq) (*DelCartsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCarts not implemented")
}
func (UnimplementedCartsServer) mustEmbedUnimplementedCartsServer() {}

// UnsafeCartsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartsServer will
// result in compilation errors.
type UnsafeCartsServer interface {
	mustEmbedUnimplementedCartsServer()
}

func RegisterCartsServer(s grpc.ServiceRegistrar, srv CartsServer) {
	s.RegisterService(&Carts_ServiceDesc, srv)
}

func _Carts_DelCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCartsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServer).DelCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Carts/DelCarts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServer).DelCarts(ctx, req.(*DelCartsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Carts_ServiceDesc is the grpc.ServiceDesc for Carts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Carts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Carts",
	HandlerType: (*CartsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelCarts",
			Handler:    _Carts_DelCarts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
