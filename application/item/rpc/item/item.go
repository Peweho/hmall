// Code generated by goctl. DO NOT EDIT.
// Source: item.proto

package item

import (
	"context"

	"hmall/application/item/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DelFlashItemStockReq  = pb.DelFlashItemStockReq
	DelFlashItemStockResp = pb.DelFlashItemStockResp
	DelStockReq           = pb.DelStockReq
	DelStockResp          = pb.DelStockResp
	FindItemByIdsReq      = pb.FindItemByIdsReq
	FindItemByIdsResp     = pb.FindItemByIdsResp
	ItemDetail            = pb.ItemDetail
	Items                 = pb.Items

	Item interface {
		FindItemByIds(ctx context.Context, in *FindItemByIdsReq, opts ...grpc.CallOption) (*FindItemByIdsResp, error)
		DelStock(ctx context.Context, in *DelStockReq, opts ...grpc.CallOption) (*DelStockResp, error)
		DelStockRollBack(ctx context.Context, in *DelStockReq, opts ...grpc.CallOption) (*DelStockResp, error)
		// 秒杀商品服务
		DelFlashItemStock(ctx context.Context, in *DelFlashItemStockReq, opts ...grpc.CallOption) (*DelFlashItemStockResp, error)
	}

	defaultItem struct {
		cli zrpc.Client
	}
)

func NewItem(cli zrpc.Client) Item {
	return &defaultItem{
		cli: cli,
	}
}

func (m *defaultItem) FindItemByIds(ctx context.Context, in *FindItemByIdsReq, opts ...grpc.CallOption) (*FindItemByIdsResp, error) {
	client := pb.NewItemClient(m.cli.Conn())
	return client.FindItemByIds(ctx, in, opts...)
}

func (m *defaultItem) DelStock(ctx context.Context, in *DelStockReq, opts ...grpc.CallOption) (*DelStockResp, error) {
	client := pb.NewItemClient(m.cli.Conn())
	return client.DelStock(ctx, in, opts...)
}

func (m *defaultItem) DelStockRollBack(ctx context.Context, in *DelStockReq, opts ...grpc.CallOption) (*DelStockResp, error) {
	client := pb.NewItemClient(m.cli.Conn())
	return client.DelStockRollBack(ctx, in, opts...)
}

// 秒杀商品服务
func (m *defaultItem) DelFlashItemStock(ctx context.Context, in *DelFlashItemStockReq, opts ...grpc.CallOption) (*DelFlashItemStockResp, error) {
	client := pb.NewItemClient(m.cli.Conn())
	return client.DelFlashItemStock(ctx, in, opts...)
}
